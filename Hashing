Hashing: Hashing is a way of map big domain to small domain

----------------
Apple----------------- 5
Banana-----------------3
Graps------------------1
Mango------------------4
Jackfruit--------------2
---------------

Applications: 
  1.String equal check
  2.SubString check
  3.Palidromic check
  4.SubSequence problems solve
  
Complexity:
      search : base-> O(1) worse->O(n)
      
 Hash functions:
  1.General Hash: H(str)= summation (S[i] * p^i)%mod =====> Polynomial Equation
                           Here, 0<=i<n
                                  mod =1e9+7(prime number)
                                  p > number of unique characters
                                  
 2.Add Suffix character to hash: H(s+x) =[ summation (S[i] * p^i)+ x * p^n ]% mod.   ->for summation 0<=i<n
                                        = [H(s)+x*p^n]%mod
                                        = H(s) % mod + (x*p^n) % mod
                                        
 3.Add prefix character to hash: H(x+s) = [x*P^0 + summation (S[i]* p^(i+1)] % mod  -> for summation 0<=i<n
                                        =[ x + P* summation (S[i]* p^i ] % mod
                                        = [x + P* H(s)]% mod
                                        
4. Sub String Hash: H s[i...j] = [ summation S[k=i]* p^(k-i) ] % mod  -> for summation i<=k<=j
                               =[ [ summation S[k=i] * p^k ] +  --> for summation i<=k<j  --->i..j
                               [ [summation ( S[k=0]*p^k    ---> for summation 0<=k<i      --->0...i-1
                                                        - S[k=0]*p^k) ]  ---> for summation 0<=k<i 
                                                        ]*p^(-i)]% mod
                               = [ summation S[k=i] * p^k ] + 0 ]*p^(-i)]% mod
                               
                               = [ [ H(j)-H(i-1) ] * p^(-i) ]% mod  // this works efficiently
                               
                               
